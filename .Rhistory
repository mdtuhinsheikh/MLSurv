RSF <- c(0.758, 0.627, 0.893, 0.619, 0.620, 0.550, 0.648)
dt <- data.frame(Experiment, CPH, DeepSurv, RSF)
kable(dt, "latex", caption = "Demo table", booktabs = T) %>%
kable_styling(latex_options = c("striped", "hold_position"))
library(dplyr)
kable(dt, "latex", caption = "Demo table", booktabs = T) %>%
kable_styling(latex_options = c("striped", "hold_position"))
library(kableExtra)
kable(dt, "latex", caption = "Demo table", booktabs = T) %>%
kable_styling(latex_options = c("striped", "hold_position"))
library(DT)
knitr::opts_chunk$set(echo = FALSE)
source("need.packages.R")
pkg <- c("kableExtra", "dplyr", "ggplot2", "DT")
need.packages(pkg)
datatable(dt)
datatable(dt, rownames = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
install_github("whcsu/SurvELM")
library(survcomp)
install.packages("survcomp")
library(survcomp)
install.packages("survcomp")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("survcomp")
library(survcomp)
library(survival)
set.seed(123)
data(lung)
lung=na.omit(lung)
lung[,3]=lung[,3]-1
n=dim(lung)[1]
L=sample(1:n,ceiling(n*0.5))
trset<-lung[L,]
teset<-lung[-L,]
rii=c(2,3)
elmsurvmodel=ELMCoxBoost(x=trset[,-rii],
y=Surv(trset[,rii[1]], trset[,rii[2]]))
BiocManager::install("survcomp")
install.packages("randomForestSRC")
data("pbc", package = "randomForestSRC")
head(pbc)
pbc.trial <- pbc %>% filter(!is.na(treatment))
pbc.test <- pbc %>% filter(is.na(treatment))
install.packages("ggRandomForests")
library(ggRandomForests)
library(randomForestSRC)
library(ggRandomForests)
install.packages("randomForestSRC")
install("dplyr")
install.packages("randomForestSRC")
knitr::opts_chunk$set(echo = TRUE)
install("dplyr")
library(dplyr)
randomForestSRC
library(randomForestSRC)
install.packages("ggRandomForests")
library(ggRandomForests)
install.packages("rlang")
library(rlang)
library(ggRandomForests)
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
library(Rcpp)
library(randomForestSRC)
library(ggRandomForests)
install.packages("backports")
library(backports)
library(ggRandomForests)
install.packages("purrr")
install.packages("purrr")
library(purrr)
library(ggRandomForests)
pbc.trial <- pbc %>% filter(!is.na(treatment))
data("pbc", package = "randomForestSRC")
pbc.trial <- pbc %>% filter(!is.na(treatment))
head(pbc)
library(dplyr)
pbc.trial <- pbc %>% filter(!is.na(treatment))
pbc.test <- pbc %>% filter(is.na(treatment))
# Create the gg_survival object
gg_dta <- gg_survival(interval = "years",
censor = "status",
by = "treatment",
data = pbc.trial,
conf.int = 0.95)
head(pbc)
pbc$years <- pbc$days/365
pbc.trial <- pbc %>% filter(!is.na(treatment))
pbc.test <- pbc %>% filter(is.na(treatment))
# Create the gg_survival object
gg_dta <- gg_survival(interval = "years",
censor = "status",
by = "treatment",
data = pbc.trial,
conf.int = 0.95)
gg_dta
gg_dta
plot(gg_dta) +
labs(y = "Survival Probability", x = "Observation Time (years)",
color = "Treatment", fill = "Treatment") +
theme(legend.position = c(0.2, 0.2)) +
coord_cartesian(y = c(0, 1.01))
library(ggplot2)
plot(gg_dta) +
labs(y = "Survival Probability", x = "Observation Time (years)",
color = "Treatment", fill = "Treatment") +
theme(legend.position = c(0.2, 0.2)) +
coord_cartesian(y = c(0, 1.01))
install.packages("digest")
library("digest")
plot(gg_dta) +
labs(y = "Survival Probability", x = "Observation Time (years)",
color = "Treatment", fill = "Treatment") +
theme(legend.position = c(0.2, 0.2)) +
coord_cartesian(y = c(0, 1.01))
plot(gg_dta, type = "cum_haz") +
labs(y = "Cumulative Hazard", x = "Observation Time (years)",
color = "Treatment", fill = "Treatment") +
theme(legend.position = c(0.2, 0.8)) +
coord_cartesian(ylim = c(-0.02, 1.22))
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
install.packages("prodlim")
install.packages("prodlim")
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
library(prodlim)
set.seed(13)
dat <- SimSurv(100)
# fit three different Cox models and a random survival forest
# note: low number of trees for the purpose of illustration
library(survival)
head(dat)
summary(dat$event)
summary(dat$status)
table(dat$status)
table(dat$event)
# fit three different Cox models and a random survival forest
# note: low number of trees for the purpose of illustration
library(survival)
library(randomForestSRC)
cox12 <- coxph(Surv(time,status)~X1+X2,data=dat,x=TRUE,y=TRUE)
cox1 <- coxph(Surv(time,status)~X1,data=dat,x=TRUE,y=TRUE)
cox2 <- coxph(Surv(time,status)~X2,data=dat,x=TRUE,y=TRUE)
rsf1 <- rfsrc(Surv(time,status)~X1+X2,data=dat,ntree=15,forest=TRUE)
#
# compute the apparent estimate of the C-index at different time points
#
ApparrentCindex  <- pec::cindex(list("Cox X1"=cox1,
"Cox X2"=cox2,
"Cox X1+X2"=cox12,
"RSF"=rsf1),
formula=Surv(time,status)~X1+X2,
data=dat,
eval.times=seq(1,15,1))
install.packages("pec")
install.packages("pec")
rar
install.packages("pec")
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
library(pec)
#
# compute the apparent estimate of the C-index at different time points
#
ApparrentCindex  <- pec::cindex(list("Cox X1"=cox1,
"Cox X2"=cox2,
"Cox X1+X2"=cox12,
"RSF"=rsf1),
formula=Surv(time,status)~X1+X2,
data=dat,
eval.times=seq(1,15,1))
# fit three different Cox models and a random survival forest
# note: low number of trees for the purpose of illustration
library(survival)
library(randomForestSRC)
cox12 <- coxph(Surv(time,status)~X1+X2,data=dat,x=TRUE,y=TRUE)
cox1 <- coxph(Surv(time,status)~X1,data=dat,x=TRUE,y=TRUE)
cox2 <- coxph(Surv(time,status)~X2,data=dat,x=TRUE,y=TRUE)
rsf1 <- rfsrc(Surv(time,status)~X1+X2,data=dat,ntree=15,forest=TRUE)
#
# compute the apparent estimate of the C-index at different time points
#
ApparrentCindex  <- pec::cindex(list("Cox X1"=cox1,
"Cox X2"=cox2,
"Cox X1+X2"=cox12,
"RSF"=rsf1),
formula=Surv(time,status)~X1+X2,
data=dat,
eval.times=seq(1,15,1))
install.packages("riskRegression")
library(riskRegression)
library(pec)
library(prodlim)
set.seed(13)
dat <- SimSurv(100)
# fit three different Cox models and a random survival forest
# note: low number of trees for the purpose of illustration
library(survival)
library(randomForestSRC)
cox12 <- coxph(Surv(time,status)~X1+X2,data=dat,x=TRUE,y=TRUE)
cox1 <- coxph(Surv(time,status)~X1,data=dat,x=TRUE,y=TRUE)
cox2 <- coxph(Surv(time,status)~X2,data=dat,x=TRUE,y=TRUE)
rsf1 <- rfsrc(Surv(time,status)~X1+X2,data=dat,ntree=15,forest=TRUE)
#
# compute the apparent estimate of the C-index at different time points
#
ApparrentCindex  <- pec::cindex(list("Cox X1"=cox1,
"Cox X2"=cox2,
"Cox X1+X2"=cox12,
"RSF"=rsf1),
formula=Surv(time,status)~X1+X2,
data=dat,
eval.times=seq(1,15,1))
print(ApparrentCindex)
plot(ApparrentCindex)
#
# compute the apparent estimate of the C-index at different time points
#
ApparrentCindex  <- pec::cindex(list("Cox X1"=cox1,
"Cox X2"=cox2,
"Cox X1+X2"=cox12,
"RSF"=rsf1),
formula=Surv(time,status)~X1+X2,
data=dat,
eval.times=Inf)
concordance(cox1)
concordance(cox12)
concordance(rsf1)
rsf1
str(rsf1)
rsf1$cif
rsf1$cif.oob
rsf1$err.rate
1-rsf1$err.rate
summary(dat$time)
head(dat)
concordance(cox1)
concordance(cox12)
concordance(cox2)
rrsf1
rsf1
1-0.32
#install.packages("mlbench")
#install.packages("ipred")
#install.packages("randomForestSRC")
library("randomForestSRC")
library(ipred)
library(mlbench)
library("MASS")
library("survival")
#---------
data(breast, package = "randomForestSRC")
breast <- na.omit(breast)
o <- rfsrc(status ~ ., data = breast, nsplit = 10)
print(o)
mod2 <- bagging(status ~ ., data = breast, coob=TRUE)
print(mod2)
mod <- bagging(Class ~ Cl.thickness + Cell.size
+ Cell.shape + Marg.adhesion
+ Epith.c.size + Bare.nuclei
+ Bl.cromatin + Normal.nucleoli
+ Mitoses, data=BreastCancer, coob=TRUE)
data("BreastCancer", package = "mlbench")
mod <- bagging(Class ~ Cl.thickness + Cell.size
+ Cell.shape + Marg.adhesion
+ Epith.c.size + Bare.nuclei
+ Bl.cromatin + Normal.nucleoli
+ Mitoses, data=BreastCancer, coob=TRUE)
print(mod)
mod <- bagging(Class ~ ., data=BreastCancer, coob=TRUE)
mod1 <- rfsrc(Class ~ Cl.thickness + Cell.size
+ Cell.shape + Marg.adhesion
+ Epith.c.size + Bare.nuclei
+ Bl.cromatin + Normal.nucleoli
+ Mitoses, data = BreastCancer, nsplit = 10)
print(mod1)
print(o)
print(mod2)
names(mod2)
mod2$err
names(o)
o$err.rate
names(o)
print(o)
o$'Confusion matrix'
names(o)
dim(o$err.rate)
apply(o$err.rate, 2, mean)
apply(o$err.rate, 2, function(x) mean(x, na.rm=T))
mod2$err
knitr::opts_chunk$set(echo = FALSE)
source("need.packages.R")
pkg <- c("kableExtra", "dplyr", "ggplot2", "DT", "httpuv",
"mlbench", "ipred", "randomForestSRC", "MASS",
"survival")
need.packages(pkg)
mod1 <- rfsrc(status ~ ., data = breast, nsplit = 10)
mod2 <- bagging(status ~ ., data = breast, coob=TRUE)
mod1 <- rfsrc(status ~ ., data = breast, nsplit = 10)
mod2 <- bagging(status ~ ., data = breast, coob=TRUE)
mod1$err
res <- c(mean(mod1$err.rate[1, ], na.rm = TRUE), mod2$err)
res
mod1 <- rfsrc(status ~ ., data = breast, nsplit = 10)
mod1 <- rfsrc(status ~ ., data = breast, nsplit = 10)
print(mod1)
mod2 <- bagging(status ~ ., data = breast, coob=TRUE)
print(mod2)
names(mod1)
mod1$err.rate
mean(mod1$err.rate[, 1], na.rm = T)
mod1$err.rate
print(mod1)
mean(mod1$err.rate[, 1], na.rm = T)
res <- c(mean(mod1$err.rate[, 1], na.rm = TRUE), mod2$err)
res
names(res) <- c("RSF", "Baggin")
res
row.names(res) <- "Error Rate"
rownames(res) <- "Error Rate"
res <- as.data.frame(c(mean(mod1$err.rate[, 1], na.rm = TRUE), mod2$err))
names(res) <- c("RSF", "Baggin")
colnames(res) <- c("RSF", "Baggin")
res
colnames(res) <- c("Error Rate")
colnames(res) <- "Error Rate"
rownames(res) <- c("RSF", "Baggin")
res
data.table(res)
?breast
library(kableExtra)
?kable
kable(res)
library(knitr)
library(kableExtra)
dt <- mtcars[1:5, 1:6]
plot(mod1)
plot.survival(mod1)
coxb <- coxph(Surv(time,status)~X1+X2,data=dat,x=TRUE,y=TRUE)
head(breast)
mod1 <- rfsrc(status ~ ., data = dat, nsplit = 10)
print(mod1)
mod2 <- bagging(status ~ ., data = dat, coob=TRUE)
print(mod2)
cox12 <- coxph(Surv(time,status)~X1+X2,data=dat,x=TRUE,y=TRUE)
concordance()
concordance(cox12)
#---------------
data(veteran, package = "randomForestSRC")
v.obj <- rfsrc(Surv(time, status) ~ ., data = veteran, ntree = 100)
v.obj$err.rate
mean(v.obj$err.rate[, 1], na.rm=T)
mean(v.obj$err.rate, na.rm=T)
coxv <- coxph(Surv(time, status)~., data=veteran,x=TRUE,y=TRUE)
concordance(ccox.zph())
concordance(coxv)
mod3 <- bagging(status ~ ., data = veteran, coob=TRUE)
print(mod3)
?veterans
??veterans
head(veteran)
#---------------
data(veteran, package = "randomForestSRC")
v.obj <- rfsrc(Surv(time, status) ~ ., data = veteran, ntree = 100)
## Plot the error.
plot(v.obj)
v.obj
mod3 <- bagging(status ~ ., data = veteran, coob=TRUE)
print(mod3)
v.obj$err.rate
mean(v.obj$err.rate, na.rm=T)
# Edgar Anderson's iris data with morphologic variation of three
# related species.
iris.obj <- rfsrc(Species ~., data = iris, ntree=100)
iris.obj
head(iris)
wihs.obj <- rfsrc(Surv(time, status) ~ ., data=wihs, nsplit=3, ntree=100)
data(wihs, package = "randomForestSRC")
wihs.obj <- rfsrc(Surv(time, status) ~ ., data=wihs, nsplit=3, ntree=100)
wihs.obj
mod4 <- bagging(status ~ ., data = wihs, coob=TRUE)
print(mod4)
coxv <- coxph(Surv(time, status)~., data=wihs,x=TRUE,y=TRUE)
concordance(coxv)
wihs.obj <- rfsrc(Surv(time, status) ~ ., data=wihs, nsplit=3, ntree=10)
wihs.obj
wihs.obj <- rfsrc(Surv(time, status) ~ ., data=wihs, nsplit=3, ntree=150)
wihs.obj <- rfsrc(Surv(time, status) ~ ., data=wihs, nsplit=10, ntree=100)
wihs.obj
mean(wihs.obj$err.rate)
mean(wihs.obj$err.rate, na.rm = T)
1-mean(wihs.obj$err.rate, na.rm = T)
knitr::opts_chunk$set(echo = FALSE)
source("need.packages.R")
pkg <- c("kableExtra", "dplyr", "ggplot2", "DT", "httpuv",
"mlbench", "ipred", "randomForestSRC", "MASS",
"survival", "kableExtra", "knitr", "xml2")
need.packages(pkg)
data(veteran, package = "randomForestSRC")
veteran <- na.omit(veteran)
dim(veteran)
data(veteran, package = "randomForestSRC")
dim(veteran)
head(veteran)
mod1 <- rfsrc(status ~ ., data = veteran, nsplit = 10)
mod1 <- rfsrc(status ~ ., data = veteran, nsplit = 10)
mod1
mod1 <- rfsrc(status ~ ., data = veteran, nsplit = 10, ntree = 100)
mod1
mod1 <- rfsrc(status ~ ., data = veteran, ntree = 100)
mod1
data(veteran, package = "randomForestSRC")
v.obj <- rfsrc(Surv(time, status) ~ ., data = veteran, ntree = 100)
v.obj
mod1 <- rfsrc(status ~ ., data = breast, nsplit = 10)
print(mod1)
mod2 <- bagging(status ~ ., data = breast, coob=TRUE)
print(mod2)
mod1 <- rfsrc(status ~ ., data = breast, nsplit = 10)
data(breast, package = "randomForestSRC")
breast <- na.omit(breast)
mod1 <- rfsrc(status ~ ., data = breast, nsplit = 10)
mod1 <- rfsrc(status ~ ., data = breast, nsplit = 10)
mod2 <- bagging(status ~ ., data = breast, coob=TRUE)
mod1
mod2
res <- as.data.frame(c(mean(mod1$err.rate[, 1], na.rm = TRUE),
mod2$err))
res
mod2$err
res <- as.data.frame(c(mean(mod1$err.rate[, 1], na.rm = TRUE),
mod2$err))
colnames(res) <- "Error Rate"
rownames(res) <- c("RSF", "Bagging")
res
mod1 <- rfsrc(status ~ ., data = breast, nsplit = 10)
mod1 <- rfsrc(status ~ ., data = breast, nsplit = 10)
mod2 <- bagging(status ~ ., data = breast, coob=TRUE)
mod2 <- bagging(status ~ ., data = breast, coob=TRUE)
res <- as.data.frame(c(mean(mod1$err.rate[, 1], na.rm = TRUE),
mod2$err))
res <- as.data.frame(c(mean(mod1$err.rate[, 1], na.rm = TRUE),
mod2$err))
colnames(res) <- "Error Rate"
colnames(res) <- "Error Rate"
rownames(res) <- c("RSF", "Bagging")
res
plot(ApparrentCindex)
plot(ApparrentCindex)
rsf1
1-32.94
100-32.94
concordance(cox12)
concordance(cox1)
concordance(cox2)
rsf2 <- rfsrc(Surv(time,status)~X1,data=dat,ntree=15,forest=TRUE)
rsf2
rsf2 <- rfsrc(Surv(time,status)~X2,data=dat,ntree=15,forest=TRUE)
rsf2
set.seed(20)
dat <- SimSurv(100)
# fit three different Cox models and a random survival forest
# note: low number of trees for the purpose of illustration
library(survival)
library(randomForestSRC)
cox12 <- coxph(Surv(time,status)~X1+X2,data=dat,x=TRUE,y=TRUE)
cox1 <- coxph(Surv(time,status)~X1,data=dat,x=TRUE,y=TRUE)
cox2 <- coxph(Surv(time,status)~X2,data=dat,x=TRUE,y=TRUE)
rsf1 <- rfsrc(Surv(time,status)~X1+X2,data=dat,ntree=15,forest=TRUE)
#
# compute the apparent estimate of the C-index at different time points
#
ApparrentCindex  <- pec::cindex(list("Cox X1"=cox1,
"Cox X2"=cox2,
"Cox X1+X2"=cox12,
"RSF"=rsf1),
formula=Surv(time,status)~X1+X2,
data=dat,
eval.times=seq(1,15,1))
plot(ApparrentCindex)
concordance(cox12)
rsf1
coxb <- coxph(Surv(time, status)~., data=breast,x=TRUE,y=TRUE)
#---------
data(breast, package = "randomForestSRC")
breast <- na.omit(breast)
head(breast)
coxv <- coxph(Surv(time, status)~., data=veteran,x=TRUE,y=TRUE)
#---------------
data(veteran, package = "randomForestSRC")
v.obj <- rfsrc(Surv(time, status) ~ ., data = veteran, ntree = 100)
concordance(v.obj)
concordance(coxv)
concordance(v.obj)
v.obj
?veteran
mod3 <- coxph(Surv(time, status)~., data=veteran,x=TRUE,y=TRUE)
mod4 <- rfsrc(Surv(time, status) ~ ., data = veteran, ntree = 100)
concordance(mod3)
mod4
mod4$err.rate
mean(mod4$err.rate, na.rm=T)
cindex <- as.data.frame(c(concordance(mod3), mean(mod4$err.rate, na.rm=T)))
mod3 <- bagging(Surv(time, status) ~ ., data = veteran, coob=TRUE)
print(mod3)
mod3 <- bagging(status ~ ., data = veteran, coob=TRUE)
print(mod3)
